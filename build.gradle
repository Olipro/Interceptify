plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id "org.sonarqube" version "3.3"
    id "org.ajoberstar.grgit" version "4.1.1"
}

ext.isRelease = System.getenv('IS_RELEASE') != null
def getSonatypeURL() {
    return ext.isRelease ?
            "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/" :
            "https://s01.oss.sonatype.org/content/repositories/snapshots/";
}
def calcVersion() {
    return ext.isRelease ? grgit.describe().replace('v', '') : 'SNAPSHOT'
}

group 'net.uptheinter'
version calcVersion()

compileJava {
    options.release = 12
    options.compilerArgs << '-Xlint:unchecked'
}

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "Olipro_Interceptify"
        property "sonar.organization", "olipro"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectVersion", project.version.toString()
    }
}

publishing {
    repositories {
        maven {
            url = getSonatypeURL()
            credentials {
                username = System.getenv("OSSRH_USER")
                password = System.getenv("OSSRH_PASS")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = project.name
                packaging = 'pom'
                description = 'A library for runtime java code interception'
                url = 'https://github.com/Olipro/Interceptify'
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                distributionManagement {
                    downloadUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                }
                issueManagement {
                    system = "github.com"
                    url = "https://github.com/Olipro/Interceptify/issues"
                }
                developers {
                    developer {
                        id = 'Olipro'
                        name = 'Oliver S.'
                        email = 'olipro@uptheinter.net'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Olipro/Interceptify.git'
                    developerConnection = 'scm:git:https://github.com/Olipro/Interceptify.git'
                    url = 'https://github.com/Olipro/Interceptify'
                    tag = System.getenv('IS_RELEASE') == null ? 'HEAD' : grgit.describe()
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    useInMemoryPgpKeys(System.getenv("OSSRH_KEY"), System.getenv("OSSRH_KEYPASS"))
}

javadoc {
    options.addBooleanOption('html5', true)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.12.7'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '4.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

tasks.named('jar') {
    manifest {
        attributes('Premain-Class' : 'net.uptheinter.interceptify.EntryPoint',
                   'Agent-Class' : 'net.uptheinter.interceptify.EntryPoint',
                   'Can-Redefine-Classes': 'true',
                   'Can-Retransform-Classes': 'true',
                   'Can-Set-Native-Method-Prefix' : 'true',
                  )
    }
}

test {
    useJUnitPlatform()
}
